
HW2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000208  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000774  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c6  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bc  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000084  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

unsigned char SWITCH_V, i, test_bit;

int main(void)
{
	DDRB	= 0xC0;
  a6:	80 ec       	ldi	r24, 0xC0	; 192
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB	= 0x3F;
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	85 b9       	out	0x05, r24	; 5
	SWITCH_V = PINB;
  ae:	93 b1       	in	r25, 0x03	; 3
  b0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <SWITCH_V>
	// Set Pin Change Interrupt 
    PCICR	= 0x01;
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0	= 0x3F;
  ba:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	sei();
  be:	78 94       	sei
				}
			}
		}
		else
		{
			DDRC	= LOOKUPTB[12];
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
    {
		if(SWITCH_V)
		{
			for(i=0; i<6; i++)
			{
				test_bit = SWITCH_V & (1 << i);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	50 e0       	ldi	r21, 0x00	; 0
    PCICR	= 0x01;
	PCMSK0	= 0x3F;
	sei();
    while (1) 
    {
		if(SWITCH_V)
  c8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SWITCH_V>
  cc:	88 23       	and	r24, r24
  ce:	89 f1       	breq	.+98     	; 0x132 <main+0x8c>
		{
			for(i=0; i<6; i++)
  d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i>
  d4:	80 e0       	ldi	r24, 0x00	; 0
			{
				test_bit = SWITCH_V & (1 << i);
  d6:	28 2f       	mov	r18, r24
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	ba 01       	movw	r22, r20
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x3c>
  de:	66 0f       	add	r22, r22
  e0:	77 1f       	adc	r23, r23
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <main+0x38>
  e6:	cb 01       	movw	r24, r22
  e8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <SWITCH_V>
  ec:	89 23       	and	r24, r25
  ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
				if(test_bit)
  f2:	88 23       	and	r24, r24
  f4:	b1 f0       	breq	.+44     	; 0x122 <main+0x7c>
				{
					DDRC	= LOOKUPTB[2*i];
  f6:	22 0f       	add	r18, r18
  f8:	33 1f       	adc	r19, r19
  fa:	f9 01       	movw	r30, r18
  fc:	e0 50       	subi	r30, 0x00	; 0
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	80 81       	ld	r24, Z
 102:	87 b9       	out	0x07, r24	; 7
					PORTC	= LOOKUPTB[2*i + 1];
 104:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <i>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e0 50       	subi	r30, 0x00	; 0
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	81 81       	ldd	r24, Z+1	; 0x01
 114:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9c e9       	ldi	r25, 0x9C	; 156
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x74>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x7a>
 120:	00 00       	nop
	sei();
    while (1) 
    {
		if(SWITCH_V)
		{
			for(i=0; i<6; i++)
 122:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i>
 12c:	86 30       	cpi	r24, 0x06	; 6
 12e:	98 f2       	brcs	.-90     	; 0xd6 <main+0x30>
 130:	cb cf       	rjmp	.-106    	; 0xc8 <main+0x22>
				}
			}
		}
		else
		{
			DDRC	= LOOKUPTB[12];
 132:	1c 96       	adiw	r26, 0x0c	; 12
 134:	8c 91       	ld	r24, X
 136:	1c 97       	sbiw	r26, 0x0c	; 12
 138:	87 b9       	out	0x07, r24	; 7
			PORTC	= LOOKUPTB[13];
 13a:	1d 96       	adiw	r26, 0x0d	; 13
 13c:	8c 91       	ld	r24, X
 13e:	1d 97       	sbiw	r26, 0x0d	; 13
 140:	88 b9       	out	0x08, r24	; 8
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <main+0x22>

00000144 <__vector_3>:
		}
    }
}

ISR(PCINT0_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
	SWITCH_V = PINB;
 150:	83 b1       	in	r24, 0x03	; 3
 152:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SWITCH_V>
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
