
HW3C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000160  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800110  00800110  00000204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076f  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00000a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bf  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	0b01111001,	0b01110001	// E, F
};

int main(void)
{
    DDRB	= 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB	= LOOKUPTB[0];
  aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <LOOKUPTB>
  ae:	85 b9       	out	0x05, r24	; 5
	DDRD	= 0xFB;
  b0:	8b ef       	ldi	r24, 0xFB	; 251
  b2:	8a b9       	out	0x0a, r24	; 10
	PORTD	= 0x04;
  b4:	84 e0       	ldi	r24, 0x04	; 4
  b6:	8b b9       	out	0x0b, r24	; 11
	COUNT	= 0;
  b8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <COUNT>
	
	EICRA	= 0x02; // Falling Edge Interrupt
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK	= 0x01;	// Enable INT0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	8d bb       	out	0x1d, r24	; 29
	sei();			// Enable Interrupt
  c6:	78 94       	sei
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x22>

000000ca <__vector_1>:
		
    }
}

ISR(INT0_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	TIMER = 0;
  de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
  e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	while( !(PIND & 0x04) && TIMER < 3000)
  e6:	4a 99       	sbic	0x09, 2	; 9
  e8:	1e c0       	rjmp	.+60     	; 0x126 <__vector_1+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__vector_1+0x24>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_1+0x2a>
  f4:	00 00       	nop
	{
		_delay_ms(1);
		PORTB ^= 0x80; // Check 3 Sec
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 58       	subi	r24, 0x80	; 128
  fa:	85 b9       	out	0x05, r24	; 5
		TIMER++;
  fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 100:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 10a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}

ISR(INT0_vect)
{
	TIMER = 0;
	while( !(PIND & 0x04) && TIMER < 3000)
 10e:	4a 99       	sbic	0x09, 2	; 9
 110:	04 c0       	rjmp	.+8      	; 0x11a <__vector_1+0x50>
 112:	88 3b       	cpi	r24, 0xB8	; 184
 114:	2b e0       	ldi	r18, 0x0B	; 11
 116:	92 07       	cpc	r25, r18
 118:	40 f3       	brcs	.-48     	; 0xea <__vector_1+0x20>
		_delay_ms(1);
		PORTB ^= 0x80; // Check 3 Sec
		TIMER++;
	}
	
	if(TIMER==3000)
 11a:	88 3b       	cpi	r24, 0xB8	; 184
 11c:	9b 40       	sbci	r25, 0x0B	; 11
 11e:	19 f4       	brne	.+6      	; 0x126 <__vector_1+0x5c>
	{
		COUNT = 0;
 120:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <COUNT>
 124:	0a c0       	rjmp	.+20     	; 0x13a <__vector_1+0x70>
	}
	else
	{
		COUNT++;
 126:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <COUNT>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
		if(COUNT==16)
 12c:	80 31       	cpi	r24, 0x10	; 16
 12e:	19 f0       	breq	.+6      	; 0x136 <__vector_1+0x6c>
	{
		COUNT = 0;
	}
	else
	{
		COUNT++;
 130:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <COUNT>
 134:	02 c0       	rjmp	.+4      	; 0x13a <__vector_1+0x70>
		if(COUNT==16)
			COUNT = 0;
 136:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <COUNT>
	}
	PORTB	= LOOKUPTB[COUNT];
 13a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <COUNT>
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	85 b9       	out	0x05, r24	; 5
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
