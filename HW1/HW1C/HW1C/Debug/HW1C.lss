
HW1C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000001c8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011c  0080011c  00000278  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000825  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000719  00000000  00000000  00000b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000338  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cf  00000000  00000000  000019ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 31       	cpi	r26, 0x1E	; 30
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
		0x03, 0xFF, 0xFF, 0xFF, 0x06, 0xFF, 0x09, 0x0B, 0xFF
};

int main(void)
{
	DDRB = 0xF0;
  a6:	80 ef       	ldi	r24, 0xF0	; 240
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x0F;
  aa:	8f e0       	ldi	r24, 0x0F	; 15
  ac:	85 b9       	out	0x05, r24	; 5
	DDRD = 0xFB;
  ae:	8b ef       	ldi	r24, 0xFB	; 251
  b0:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8b b9       	out	0x0b, r24	; 11
	EICRA = (1 << ISC01);	// Falling Edge Interrupt
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = 1 << INT0;		// Enable INT0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	8d bb       	out	0x1d, r24	; 29
	sei();
  c0:	78 94       	sei
    while (1) 
    {
		PORTB = 0x0F;
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	85 b9       	out	0x05, r24	; 5
		sei();
  c6:	78 94       	sei
  c8:	fd cf       	rjmp	.-6      	; 0xc4 <main+0x1e>

000000ca <blink>:
	}
}

void blink(unsigned char num, unsigned char p )
{
	for(unsigned char i=0; i<num; i++)
  ca:	88 23       	and	r24, r24
  cc:	09 f1       	breq	.+66     	; 0x110 <blink+0x46>
	{
		PORTD ^= (0x01 << p);
  ce:	31 e0       	ldi	r19, 0x01	; 1
  d0:	01 c0       	rjmp	.+2      	; 0xd4 <blink+0xa>
  d2:	33 0f       	add	r19, r19
  d4:	6a 95       	dec	r22
  d6:	ea f7       	brpl	.-6      	; 0xd2 <blink+0x8>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	93 27       	eor	r25, r19
  de:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	4f e5       	ldi	r20, 0x5F	; 95
  e2:	5a ee       	ldi	r21, 0xEA	; 234
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	41 50       	subi	r20, 0x01	; 1
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <blink+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <blink+0x26>
  f0:	00 00       	nop
		_delay_ms(300);
		PORTD ^= (0x01 << p);
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	93 27       	eor	r25, r19
  f6:	9b b9       	out	0x0b, r25	; 11
  f8:	4f e5       	ldi	r20, 0x5F	; 95
  fa:	5a ee       	ldi	r21, 0xEA	; 234
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	50 40       	sbci	r21, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <blink+0x34>
 106:	00 c0       	rjmp	.+0      	; 0x108 <blink+0x3e>
 108:	00 00       	nop
	}
}

void blink(unsigned char num, unsigned char p )
{
	for(unsigned char i=0; i<num; i++)
 10a:	2f 5f       	subi	r18, 0xFF	; 255
 10c:	82 13       	cpse	r24, r18
 10e:	e5 cf       	rjmp	.-54     	; 0xda <blink+0x10>
 110:	08 95       	ret

00000112 <__vector_1>:
		sei();
    }
}

ISR(INT0_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	cli();
 13e:	f8 94       	cli
 140:	f1 2c       	mov	r15, r1
 142:	c6 e0       	ldi	r28, 0x06	; 6
 144:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char i=0; i<3; i++)
	{
		PORTB = ~(1 << (6 - i));
 146:	01 e0       	ldi	r16, 0x01	; 1
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	c8 01       	movw	r24, r16
 14c:	0c 2e       	mov	r0, r28
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_1+0x42>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <__vector_1+0x3e>
 158:	80 95       	com	r24
 15a:	85 b9       	out	0x05, r24	; 5
		ROW = PINB & 0x0F;
 15c:	e3 b1       	in	r30, 0x03	; 3
		ROW = ROW - 7 + (i * 9);
 15e:	ef 70       	andi	r30, 0x0F	; 15
 160:	e7 50       	subi	r30, 0x07	; 7
 162:	ef 0d       	add	r30, r15
 164:	e0 93 1d 01 	sts	0x011D, r30	; 0x80011d <ROW>
		SWITCH_V = LOOKUPTB[ROW];
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	80 81       	ld	r24, Z
 170:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		if(SWITCH_V == 0x00)		blink(5, 0);
 174:	81 11       	cpse	r24, r1
 176:	05 c0       	rjmp	.+10     	; 0x182 <__vector_1+0x70>
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	0e 94 65 00 	call	0xca	; 0xca <blink>
 180:	05 c0       	rjmp	.+10     	; 0x18c <__vector_1+0x7a>
		else if(SWITCH_V != 0xFF)	blink(SWITCH_V, 1);
 182:	8f 3f       	cpi	r24, 0xFF	; 255
 184:	19 f0       	breq	.+6      	; 0x18c <__vector_1+0x7a>
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	0e 94 65 00 	call	0xca	; 0xca <blink>
 18c:	21 97       	sbiw	r28, 0x01	; 1
 18e:	89 e0       	ldi	r24, 0x09	; 9
 190:	f8 0e       	add	r15, r24
}

ISR(INT0_vect)
{
	cli();
	for(unsigned char i=0; i<3; i++)
 192:	2b e1       	ldi	r18, 0x1B	; 27
 194:	f2 12       	cpse	r15, r18
 196:	d9 cf       	rjmp	.-78     	; 0x14a <__vector_1+0x38>
		SWITCH_V = LOOKUPTB[ROW];
		if(SWITCH_V == 0x00)		blink(5, 0);
		else if(SWITCH_V != 0xFF)	blink(SWITCH_V, 1);
		
	}
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
